Python Library Documentation: package simplepbi.fabric.adminfab in simplepbi.fabric

NAME
    simplepbi.fabric.adminfab

DESCRIPTION
    .
               @@@@@@@@@@
           @@@@..........@@@@
        @@@         .        @@@
      @@.           .         . @@
     @  .     _     .         .   @
    @........| |...................@    *********************************************
    @      . | |   _____  .        @
    @      . | |  |  __ \ .        @    La Data Web
    @      . | |__| |  | |.   ***  @
    @........|____| |  | |...*   *.@    Copyright © 2024 Ignacio Barrau
    @   .       . | |__| |. *     *@
    @   .       . |_____/ . *     *@    *********************************************
    @   .       .         . *     *@
    @   .       .         . *******@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

PACKAGE CONTENTS


CLASSES
    builtins.object
        Domains
        Items
        Users
        Workspaces

    class Domains(builtins.object)
     |  Domains(token)
     |
     |  Simple library to use the api and obtain domains from it.
     |
     |  Methods defined here:
     |
     |  __init__(self, token)
     |      Create a simplePBI object to request domains API
     |      Args:
     |          token: String
     |              Bearer Token to use the Rest API
     |
     |  assign_domain_workspaces(self, domain_id, workspaces_id)
     |      Assigns the specified domain to the specified workspaces.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      workspaces_id: str uuid[]
     |          List of workspaces id
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  assign_domain_workspaces_principals(self, domain_id, principals)
     |      Assigns the specified domain to the specified principals.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      principals: str[]
     |          The principals have two items: { "id": "string", "type": "string"}
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  assign_domains_workspaces(self, domain_id, capacities_id)
     |      Assigns the specified domain to the specified capacity.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      capacities_id: str uuid[]
     |          List of capacities ids
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  create_domain(self, display_name, description=None, parent_domain_id=None)
     |      Creates a domain.
     |      ### Parameters
     |      ----
     |      display_name: str
     |          The domain display name. The display name cannot contain more than 40 characters.
     |      description: str
     |          The domain description. The description cannot contain more than 256 characters.
     |      parent_domain_id: str uuid
     |          The domain parent object ID.
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  delete_domain(self, domain_id)
     |      Deletes the specified domain.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  get_domain(self, domain_id)
     |      Returns the specified domain.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing the domain.
     |
     |  list_domain_workspaces(self, domain_id)
     |      Returns a list of workspaces for the specified domain.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the workspaces.
     |
     |  list_domains(self, non_empty_only=None)
     |      Returns a list of domains.
     |      ### Parameters
     |      ----
     |      non_empty_only: bool
     |          When true, only return domains that have at least one workspace that has an item in it. Default: false.
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the domains.
     |
     |  role_assignments_bulk_assign(self, domain_id, role, principals)
     |      Assigns the specified role to the specified principals in the specified domain.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      role: str
     |          The role to assign to the principals.
     |      principals: str[]
     |          The principals have two items: [{"id": "string", "type": "string"}]. Type can be { "User", "Group", "ServicePrincipal" }
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  role_assignments_bulk_unassign(self, domain_id, role, principals)
     |      Unassigns the specified role from the specified principals in the specified domain.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      role: str
     |          The role to unassign from the principals.
     |      principals: str[]
     |          The principals have two items: [{"id": "string", "type": "string"}]. Type can be { "User", "Group", "ServicePrincipal" }
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  unassign_all_domain_workspaces(self, domain_id)
     |      Unassigns the specified domain from all workspaces.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  unassign_domain_workspaces(self, domain_id, workspaces_id)
     |      Unassigns the specified domain from the specified workspaces.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      workspaces_id: str uuid[]
     |          List of workspaces id
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  update_domain(self, domain_id, contributors_scope, display_name, description=None)
     |      Updates the specified domain.
     |      ### Parameters
     |      ----
     |      domain_id: str uuid
     |          The domain id.
     |      contributors_scope: str
     |          The domain contributors scope. { "AdminsOnly", "AllTenant", "SpecificUsersAndGroups" }
     |      display_name: str
     |          The domain display name. The display name cannot contain more than 40 characters.
     |      description: str
     |          The domain description. The description cannot contain more than 256 characters.
     |      ### Returns
     |      ----
     |          A successful response.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Items(builtins.object)
     |  Items(token)
     |
     |  Simple library to use the  api and obtain admin requests from it.
     |
     |  Methods defined here:
     |
     |  __init__(self, token)
     |      Create a simplePBI object to request fabric admin API
     |      Args:
     |          token: String
     |              Bearer Token to use the Rest API
     |
     |  get_item(self, workspace_id, item_id, type)
     |      Returns the specified item from the specified workspace.
     |      ### Parameters
     |      ----
     |      workspace_id: str uuid
     |          The workspace id. You can take it from PBI Service URL
     |      item_id: str uuid
     |          The item id. You can take it from PBI Service URL
     |      type: str
     |          The type of the item. When querying for the following types, this parameter is required: { Report, Dashboard, SemanticModel, App, Dataflow }
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing a item in the workspace.
     |      ### Limitations
     |      ----
     |      This API is supported for a number of item types, find the supported item types here.
     |      https://learn.microsoft.com/en-us/rest/api/fabric/articles/item-management/item-management-overview
     |
     |  list_item_access_details(self, workspace_id, item_id, type=None)
     |      Returns a list of users (including groups and service principals) and lists their workspace roles.
     |      ### Parameters
     |      ----
     |      workspace_id: str uuid
     |          The workspace id. You can take it from PBI Service URL
     |      item_id: str uuid
     |          The item id. You can take it from PBI Service URL
     |      type: str
     |          The type of the item. When querying for the following types, this parameter is required: { Report, Dashboard, SemanticModel, App, Dataflow }
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the users who have access to the item.
     |
     |  list_items(self, workspace_id=None, capacity_id=None, type=None, status=None, return_pandas=False)
     |      Returns a list of items for the specified workspace, capacity, type, and status.
     |      ### Parameters
     |      ----
     |      workspace_id: str uuid
     |          The workspace id. You can take it from PBI Service URL
     |      capacity_id: str uuid
     |          The capacity id.
     |      type: str
     |          The type of the item. When querying for the following types, this parameter is required: { Report, Dashboard, SemanticModel, App, Dataflow }
     |      status: str
     |          The status of the item. { "Active", "Deleted" }
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the items.
     |      ### Limitations
     |      ----
     |      This API is supported for a number of item types, find the supported item types here.
     |      https://learn.microsoft.com/en-us/rest/api/fabric/articles/item-management/item-management-overview
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Users(builtins.object)
     |  Users(token)
     |
     |  Simple library to use the api and obtain users from it.
     |
     |  Methods defined here:
     |
     |  __init__(self, token)
     |      Create a simplePBI object to request fabric users API
     |      Args:
     |          token: String
     |              Bearer Token to use the Rest API
     |
     |  list_access_entities(self, user_id, type=None, return_pandas=False)
     |      Returns a list of access entities for the specified user.
     |      ### Parameters
     |      ----
     |      user_id: str uuid
     |          The user id.
     |      type: str
     |          The type of the access entity. { "Report", "Datamart", "Lakehouse", "Dataflow", "Dashboard", "SemanticModel", "Notebook", etc }
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the access entities.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

    class Workspaces(builtins.object)
     |  Workspaces(token)
     |
     |  Simple library to use the api and obtain workspaces from it.
     |
     |  Methods defined here:
     |
     |  __init__(self, token)
     |      Create a simplePBI object to request fabric core workspaces API
     |      Args:
     |          token: String
     |              Bearer Token to use the Rest API
     |
     |  get_workspace(self, workspace_id)
     |      Returns the specified workspace.
     |      #### Parameters
     |      ----
     |      workspace_id: str uuid
     |          The workspace id. You can take it from PBI Service URL
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing a workspace.
     |
     |  list_workspace_access_details(self, workspace_id)
     |      Returns a list of users (including groups and service principals) and lists their workspace roles.
     |      ### Parameters
     |      ----
     |      workspace_id: str uuid
     |          The workspace id. You can take it from PBI Service URL
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the users who have access to the workspace.
     |
     |  list_workspaces(self, capacity_id=None, name=None, state=None, type=None, return_pandas=False)
     |      Returns a list of workspaces
     |      ### Parameters
     |      ----
     |      capacity_id: str uuid
     |          The capacity id.
     |      name: str
     |          The name of the workspace.
     |      state: str
     |          The state of the workspace. { "Active", "Deleted" }
     |      type: str
     |          The type of the workspace. { "MyWorkspace", "WorkspaceV2" }
     |      ### Returns
     |      ----
     |      Dict:
     |          A dictionary containing all the workspaces.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables
     |
     |  __weakref__
     |      list of weak references to the object

FILE
    c:\users\ignaciobarrau\documents\github\simplepbi\simplepbi\fabric\adminfab\__init__.py

